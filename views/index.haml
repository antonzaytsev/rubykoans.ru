#main_content

  %section#introduction
    %h1
      Learning Ruby
      %span With the Edgecase Ruby Koans
    %p The Koans walk you along the path to enlightenment in order to learn Ruby. The goal is to learn the Ruby language, syntax, structure, and some common functions and libraries. We also teach you culture. Testing is not just something we pay lip service to, but something we live. It is essential in your quest to learn and do great things in the language.

  %section#the_structure
    %h2 The Structure
    %p The koans are broken out into areas by file, hashes are covered in about_hashes.rb, modules are introduced in about_modules.rb, etc. They are presented in order in the path_to_enlightenment.rb file.
    %p Each koan builds up your knowledge of Ruby and builds upon itself. It will stop at the first place you need to correct.
    %p Some koans simply need to have the correct answer substituted for an incorrect one. Some, however, require you to supply your own answer. If you see the method __ (a double underscore) listed, it is a hint to you to supply your own code in order to make it work correctly.  
  
  %section#installing_ruby
    %h2 Installing Ruby
    %p.instructions_message
      these instructions are for *nix platforms. 
      %br
      we also have 
      %a{:href => '/windows'} windows instructions
      \.
    %p 
      In order to run the koans you need Ruby installed. If you do not already have Ruby setup, please visit 
      %a{ :href => 'http://ruby-lang.org/en/downloads', :rel => 'external' } http://ruby-lang.org/en/downloads 
      for operating system specific instructions.
    %p To verify your installation, in your terminal window simply type:
    %div.terminal
      %p $ ruby --version
    %p Any response for Ruby with a version number greater than 1.8 is fine.

  %section#what_editors
    %h2 What Editors Can I Use?
    %p.instructions_message
      these instructions are for *nix platforms. 
      %br
      we also have 
      %a{:href => '/windows.html'} windows instructions
      \.
    %p You can really use any editor you'd like, but here are some suggestions:
    %ul
      %li
        %a{ :href => 'http://homepage.mac.com/zenitani/emacs-e.html', :rel => 'external' } Emacs
      %li
        %a{ :href => 'http://code.google.com/p/macvim', :rel => 'external' } Vim
      %li
        %a{ :href => 'http://macromates.com', :rel => 'external' } TextMate
      %li 
        %a{ :href => 'http://www.jetbrains.com/ruby', :rel => 'external' } RubyMine
      %li
        %a{ :href => 'http://www.jedit.org', :rel => 'external' } jEdit

  %section#the_path
    %h2 The Path to Enlightenment
    %p.instructions_message
      these instructions are for *nix platforms. 
      %br
      we also have 
      %a{:href => '/windows.html'} windows instructions
      \.
    %p You can run the tests by calling the path_to_englightenment.rb file.
    %p In your terminal, while in the ruby_koans directory, type:
    %div.terminal 
      %p [ ruby_koans ] $ ruby path_to_enlightenment.rb

    #red_green_refactor
      %h3 Red, Green, Refactor
      %p In test-driven development (TDD) the mantra has always been red: write a failing test and run it, green: make the test pass, and refactor: look at the code and see if you can make it any better. 
      %p With the koans, you will need to run the tests and see it fail (red), make the test pass (green), then take a moment and reflect upon the test to see what it is teaching you and improve the code to better communicate its intent (refactor).
      %p The very first time you run it you will see the following output:
      %div.terminal 
        %p 
          [ ruby_koans ] $ ruby path_to_enlightenment.rb
          %br
          (in /Users/person/dev/ruby_koans)
          %br
          cd koans
        %p 
          Thinking AboutAsserts
          %br
          test_assert_truth has damaged your karma.
        %p 
          You have not yet reached enlightenment ...
          %br
          <false> is not true.
        %p 
          Please meditate on the following code:
          %br
          \./about_asserts.rb:10:in `test_assert_truth'
          %br
          path_to_enlightenment.rb:27
        %p 
          mountains are merely mountains
      %p You have come to the first error. Notice you are told where to look for the error:
      %div.terminal 
        %p 
          Please meditate on the following code:
          %br
          \./about_asserts.rb:10:in `test_assert_truth'
          %br
          path_to_enlightenment.rb:27
      %p You then open up the about_asserts.rb file in your text editor and look at line 10:
      %div.editor
        %p 
          \# We shall contemplate truth by testing reality, via asserts.
          %br
          def test_assert_truth
          %br
          &nbsp;&nbsp;assert false  # This should be true
          %br
          end
      %p You then change false to true and run the tests again. You should get a new error.
      %p Before moving on, think about what you are learning. 
      %p In this specific case, ignore everything except the method name (test_assert_truth) and the parts inside the method (everything before the end). The goal is for you to see that if you pass a value to the assert method, it will either ensure it is true and continue on, or fail if in fact the statement is false.

  %section#authors
    %h2 Authors
    %p
      Jim Weirich  
      %br
      %span.email_address jim [at] weirichhouse [dot] org
      %br
      %a{ :href => 'http://twitter.com/jimweirich', :rel => 'external' } @jimweirich
    %p
      Joe O'Brien
      %br
      %span.email_address joe [at] edgecase [dot] com
      %br
      %a{ :href => 'http://twitter.com/objo', :rel => 'external' } @objo
    %br.clear

  %section#inspiration
    %h2 Inspiration
    %p A special thanks to Mike Clark and Ara Howard for inspiring this project. Mike Clark wrote an excellent blog post about learning Ruby through unit testing. This sparked an idea that has taken a bit to solidify, that of bringing new rubyists into the community through testing. Ara Howard then gave us the idea for the Koans in his ruby quiz entry on Meta Koans (a must for any rubyist wanting to improve their skills). Also, "The Little Lisper" taught us all the value of the short questions/simple answers style of learning.
    %p 
      %a{:href => 'http://clarkware.com/cgi/blosxom/2005/03/18', :rel => 'external'}
        Mike Clark's post
        %span clarkware.com/cgi/blosxom/2005/03/18
    %p 
      %a{:href => 'http://rubyquiz.com/quiz67.html', :rel => 'external'}
        Meta Koans
        %span rubyquiz.com/quiz67.html
    %p
      %a{:href => 'http://amazon.com/Little-LISPer-Third-Daniel-Friedman/dp/0023397632', :rel => 'external'}
        The Little Lisper
        %span amazon.com/Little-LISPer-Third-Daniel-Friedman/dp/0023397632

  %section#other_resources
    %h2 Other Resources
    %p
      %a{:href => 'http://pivotaltracker.com/projects/48111', :rel => 'external'}
        EdgeCase Ruby Koans Issue Tracker
        %span pivotaltracker.com/projects/48111
    %p
      %a{:href => 'http://github.com/edgecase/ruby_koans', :rel => 'external'}
        EdgeCase Ruby Koans on Github
        %span github.com/edgecase/ruby_koans
    %p
      %a{:href => 'http://ruby-lang.org', :rel => 'external'}
        The Ruby Language
        %span ruby-lang.org
    %p 
      %a{:href => 'http://tryruby.org', :rel => 'external'}
        Try Ruby in your browser
        %span tryruby.org
    %p 
      %a{:href => 'http://pragprog.com/titles/ruby/programming-ruby', :rel => 'external'}
        Dave Thomas' introduction to Ruby Programming
        %span pragprog.com/titles/ruby/programming-ruby
    %p
      %a{:href => 'http://pragprog.com/titles/bmsft/everyday-scripting-with-ruby', :rel => 'external'}
        Brian Marick's fantastic guide for beginners: Everyday Scripting with Ruby	
        %span pragprog.com/titles/bmsft/everyday-scripting-with-ruby
